// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: chunk_storage.proto

package messages

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChunkStorageClient is the client API for ChunkStorage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChunkStorageClient interface {
	StoreChunk(ctx context.Context, in *ChunkStorageRequest, opts ...grpc.CallOption) (*ChunkStorageResponse, error)
	GetChunk(ctx context.Context, in *ChunkRequest, opts ...grpc.CallOption) (*ChunkResponse, error)
}

type chunkStorageClient struct {
	cc grpc.ClientConnInterface
}

func NewChunkStorageClient(cc grpc.ClientConnInterface) ChunkStorageClient {
	return &chunkStorageClient{cc}
}

func (c *chunkStorageClient) StoreChunk(ctx context.Context, in *ChunkStorageRequest, opts ...grpc.CallOption) (*ChunkStorageResponse, error) {
	out := new(ChunkStorageResponse)
	err := c.cc.Invoke(ctx, "/messages.ChunkStorage/StoreChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkStorageClient) GetChunk(ctx context.Context, in *ChunkRequest, opts ...grpc.CallOption) (*ChunkResponse, error) {
	out := new(ChunkResponse)
	err := c.cc.Invoke(ctx, "/messages.ChunkStorage/GetChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChunkStorageServer is the server API for ChunkStorage service.
// All implementations must embed UnimplementedChunkStorageServer
// for forward compatibility
type ChunkStorageServer interface {
	StoreChunk(context.Context, *ChunkStorageRequest) (*ChunkStorageResponse, error)
	GetChunk(context.Context, *ChunkRequest) (*ChunkResponse, error)
	mustEmbedUnimplementedChunkStorageServer()
}

// UnimplementedChunkStorageServer must be embedded to have forward compatible implementations.
type UnimplementedChunkStorageServer struct {
}

func (UnimplementedChunkStorageServer) StoreChunk(context.Context, *ChunkStorageRequest) (*ChunkStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreChunk not implemented")
}
func (UnimplementedChunkStorageServer) GetChunk(context.Context, *ChunkRequest) (*ChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChunk not implemented")
}
func (UnimplementedChunkStorageServer) mustEmbedUnimplementedChunkStorageServer() {}

// UnsafeChunkStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChunkStorageServer will
// result in compilation errors.
type UnsafeChunkStorageServer interface {
	mustEmbedUnimplementedChunkStorageServer()
}

func RegisterChunkStorageServer(s grpc.ServiceRegistrar, srv ChunkStorageServer) {
	s.RegisterService(&ChunkStorage_ServiceDesc, srv)
}

func _ChunkStorage_StoreChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChunkStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkStorageServer).StoreChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.ChunkStorage/StoreChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkStorageServer).StoreChunk(ctx, req.(*ChunkStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkStorage_GetChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkStorageServer).GetChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.ChunkStorage/GetChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkStorageServer).GetChunk(ctx, req.(*ChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChunkStorage_ServiceDesc is the grpc.ServiceDesc for ChunkStorage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChunkStorage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "messages.ChunkStorage",
	HandlerType: (*ChunkStorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreChunk",
			Handler:    _ChunkStorage_StoreChunk_Handler,
		},
		{
			MethodName: "GetChunk",
			Handler:    _ChunkStorage_GetChunk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chunk_storage.proto",
}
